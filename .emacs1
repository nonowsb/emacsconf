;; ---------------------------------------------------------------------
;; GENERAL
;; ---------------------------------------------------------------------
;; debug if problemes
;(setq-default debug-on-error t)

;; hide that tucking foolbar
(tool-bar-mode -1)
;; and the startup message too
(setq inhibit-startup-message t)
(setq visible-bell t)


;; (autoload 'tail-phperror-file
;;       "tail-file" "/tmp/php_arnaud.log" t)




;; keys
;; ---------------------------------------------------------------------
(global-unset-key "\C-x\C-k") ;; kill that freaking edit-keyboard-macro
(global-unset-key "\C-z") ;; dont want to iconify-frame under X
(global-set-key '[C-tab] 'other-window)
(global-set-key "\C-x\C-g"  'goto-line)

(global-set-key '[C-i] 'indent-region)

;; scroll on  mouse wheel
;; ---------------------------------------------------------------------
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [S-mouse-4] 'down-one)
(global-set-key [S-mouse-5] 'up-one)

(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [C-mouse-4] 'down-a-lot)
(global-set-key [C-mouse-5] 'up-a-lot)

;; Tabs & spaces
;; ---------------------------------------------------------------------
;; Set tabs to 4 spaces and replace all tabs with spaces
(setq default-tab-width 4)
;(setq default-tab-width 8) ;; XXX pour conneries de notre ami MrLex
(setq-default indent-tabs-mode nil)

;; Default browser
;; ---------------------------------------------------------------------
;(setq browse-url-generic-program "mozilla"
;      browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "firefox"
      browse-url-browser-function 'browse-url-generic)

;; modeline
;; ---------------------------------------------------------------------
(column-number-mode t)



(require 'ecb)

;; ---------------------------------------------------------------------
;; TRAMP : Remote files access
;; ---------------------------------------------------------------------
;(require 'tramp)


;; css mode
;; ---------------------------------------------------------------------
(autoload 'css-mode "css-mode" "CSS editing mode" t)
(setq auto-mode-alist       
    (cons '("\\.css\\'" . css-mode) auto-mode-alist))


;; javascript mode
;; ---------------------------------------------------------------------
(autoload 'javascript-mode "javascript-mode" "Javascript editing mode" t)
(setq auto-mode-alist       
    (cons '("\\.js\\'" . javascript-mode) auto-mode-alist))



;; ---------------------------------------------------------------------
;; CUSTOMIZE - DONT EDIT PAST THIS POINT
;; ---------------------------------------------------------------------
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(auto-compression-mode t nil (jka-compr))
 '(auto-save-default nil)
 ;;;'(blink-cursor-mode nil)
 '(c-basic-offset 2)
 '(c-offsets-alist (quote ((arglist-intro . +) (arglist-cont c-lineup-gcc-asm-reg 0) (arglist-close . +))))
 '(c-tab-always-indent t)
 '(case-fold-search t)
 '(column-number-mode t)
 '(current-language-environment "utf-8")
 '(default-input-method "utf-8")
 '(ecb-add-path-for-not-matching-files (quote (nil)))
 '(ecb-auto-compatibility-check t)
 '(ecb-auto-expand-tag-tree nil)
 '(ecb-cache-directory-contents (quote ((".*" . 500))))
 '(ecb-compile-window-height nil)
 '(ecb-compile-window-temporally-enlarge (quote both))
 '(ecb-download-install-parent-dir "~/Desktop/zload")
 '(ecb-history-item-name (quote file-name))
 '(ecb-key-map (quote ("C-e" (t "fh" ecb-history-filter) (t "fs" ecb-sources-filter) (t "fm" ecb-methods-filter) (t "fr" ecb-methods-filter-regexp) (t "ft" ecb-methods-filter-tagclass) (t "fc" ecb-methods-filter-current-type) (t "fp" ecb-methods-filter-protection) (t "fn" ecb-methods-filter-nofilter) (t "fl" ecb-methods-filter-delete-last) (t "ff" ecb-methods-filter-function) (t "p" ecb-nav-goto-previous) (t "n" ecb-nav-goto-next) (t "lc" ecb-change-layout) (t "lr" ecb-redraw-layout) (t "lw" ecb-toggle-ecb-windows) (t "lt" ecb-toggle-layout) (t "s" ecb-window-sync) (t "r" ecb-rebuild-methods-buffer) (t "a" ecb-toggle-auto-expand-tag-tree) (t "x" ecb-expand-methods-nodes) (t "h" ecb-show-help) (t "gl" ecb-goto-window-edit-last) (t "g1" ecb-goto-window-edit1) (t "g2" ecb-goto-window-edit2) (t "gc" ecb-goto-window-compilation) (t "gd" ecb-goto-window-directories) (t "gs" ecb-goto-window-sources) (t "gm" ecb-goto-window-methods) (t "gh" ecb-goto-window-history) (t "gb" ecb-goto-window-speedbar) (t "md" ecb-maximize-window-directories) (t "ms" ecb-maximize-window-sources) (t "mm" ecb-maximize-window-methods) (t "mh" ecb-maximize-window-history) (t "mb" ecb-maximize-window-speedbar) (t "e" eshell) (t "o" ecb-toggle-scroll-other-window-scrolls-compile) (t "\\" ecb-toggle-compile-window) (t "/" ecb-toggle-compile-window-height) (t "," ecb-cycle-maximized-ecb-buffers) (t "." ecb-cycle-through-compilation-buffers))))
 '(ecb-kill-buffer-clears-history (quote auto))
 ;;'(ecb-layout-name "my1")
 '(ecb-options-version "2.32")
 '(ecb-other-window-behavior (quote smart))
 '(ecb-primary-secondary-mouse-buttons (quote mouse-1--mouse-2))
 '(ecb-show-sources-in-directories-buffer (quote always))
 '(ecb-source-file-regexps (quote ((".*" ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(pyc\\|elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\)$\\)\\)") ("^\\.\\(emacs\\|gnus\\)$")))))
 ;;'(ecb-source-path (quote (
 ;;                          ("/home/bruno/playground" "playground") 
 ;;                          ("/var/www/ffs/dev" "ffs-surfeur") 
 ;;                          ("/var/www/huisclos_dev" "huisclos-dev") 
 ;;                          ("/var/www/social" "social-bis") 
 ;;                          ("/var/www/siblu" "siblu") 
 ;;                          ("/home/zope/share/Products" "Icea Products") 
 ;;                          ("/var/www/drac" "Drac django")
 ;;                          ))) 

 '(ecb-source-path (quote (
  ;                         ("/home/bruno/playground" "playground") 
                           ("/var/www/dammann" "dammann") 
                           ))) 

 '(ecb-tip-of-the-day nil)
;;; '(ecb-tree-indent 2)
 '(ecb-version-check t)
 '(ecb-windows-width 0.2)
 '(fill-column 80)
 '(font-lock-verbose nil)
 '(frame-background-mode (quote light))
 '(global-font-lock-mode t nil (font-lock))
 '(global-semantic-idle-scheduler-mode nil nil (semantic-idle))
 '(global-semantic-show-dirty-mode nil nil (semantic-util-modes))
 '(global-semantic-show-unmatched-syntax-mode nil nil (semantic-util-modes))
 '(global-semantic-stickyfunc-mode nil nil (semantic-util-modes))
 '(global-semantic-summary-mode t nil (semantic-util-modes))
 '(global-senator-minor-mode t nil (senator))
 '(hippie-expand-verbose t)
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t nil (mwheel))
 '(nxhtml-auto-mode-alist (quote (("\\.x?html?\\'" . nxhtml-mumamo) ("\\.x?htmlf?\\'" . nxhtml-mumamo) ("\\.phtml\\'" . nxhtml-mumamo) ("\\.jsp\\'" . jsp-nxhtml-mumamo) ("\\.asp\\'" . asp-nxhtml-mumamo) ("\\.djhtml\\'" . django-nxhtml-mumamo) ("\\.rhtml\\'" . eruby-nxhtml-mumamo) ("\\.epl\\'" . embperl-nxhtml-mumamo) (".lzx\\'" . laszlo-nxml-mumamo))))
 '(nxhtml-default-encoding (quote utf-8))
 '(nxhtml-minor-mode-modes (quote (nxhtml-mode nxml-mode html-mode sgml-mode xml-mode image-mode dired-mode)))
 '(nxhtml-skip-welcome t)
 '(nxml-syntax-highlight-flag t)
 '(pascal-indent-level 2)
 '(password-cache-expiry 3600)
 '(pc-select-meta-moves-sexps t)
 '(pc-select-selection-keys-only t)
 '(pc-selection-mode t nil (pc-select))
 '(php-file-patterns (quote ("\\.php[s34]?\\'" "\\.phtml\\'" "\\.inc\\'" "\\.module\\'" "\\.install\\'")))
 '(php-manual-url "http://www.php.net/manual/en/")
 '(php-mode-force-pear nil)
 '(php-search-url "http://www.php.net/manual/en/")
 '(py-align-multiline-strings-p t)
 '(py-imenu-show-method-args-p t)
 '(save-place nil nil (saveplace))
 '(scroll-bar-mode (quote right))
 ;;'(semantic-which-function-use-color nil)
 '(semanticdb-default-save-directory "~/.semantic-cache" t)
 '(semanticdb-project-roots nil)
 '(show-paren-mode t nil (paren))
 '(speedbar-frame-parameters (quote ((minibuffer) (width . 20) (border-width . 0) (menu-bar-lines . 0) (tool-bar-lines . 0) (unsplittable . t) (set-background-color "black"))))
 '(speedbar-show-unknown-files t)
 '(speedbar-use-images nil)
 '(text-mode-hook (quote (text-mode-hook-identify)))
 '(tramp-auto-save-directory "~/.emacs-backups")
 '(tramp-verbose 5)
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(widget-mouse-face (quote variable-pitch)))





(set-default-font "-unknown-Liberation Serif-normal-normal-normal-*-*-*-*-*-*-0-iso10646-1" )

(setq c-default-style "linux"
          c-basic-offset 8)

;; (setq c-default-style
 ;;          '((php-mode . "linux") (other . "linux")))


;;Sauvegarder la session de travail
(require 'session) 
; save session
(add-hook 'after-init-hook 'session-initialize)
(setq session-initialize '(de-saveplace session places keys menus))
(desktop-save-mode 1) 
; always load locked desktop when started in daemon mode
(if (daemonp)
     (setq desktop-load-locked-desktop t)
  )
; save remote files too
(setq desktop-files-not-to-save "^$")


;;INCLUDES






;; COLORS
;;(if (file-exists-p "~/.emacs-colors")
;;    (load-file "~/.emacs-colors"))

;;    (load-file "~/themes/emacs/charcoal"))
    (load-file "~/themes/emacs/whitest"))

;;KEYS
(if (file-exists-p "~/.emacs-keys")
    (load-file "~/.emacs-keys"))





;;;(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 ;;;'(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :family "adobe-courier"))))
 ;;;'(background "blue")
 ;;;'(border ((t (:background "black"))))
 ;;;'(custom-button ((((type x w32 mac) (class color)) (:background "lightgrey" :foreground "black" :box (:line-width 2 :style released-button) :family "helv"))))
 ;;;'(custom-button-pressed ((((type x w32 mac) (class color)) (:background "lightgrey" :foreground "black" :box (:line-width 2 :style pressed-button)))))
 ;;;'(custom-comment ((((class grayscale color) (background light)) (:inherit variable-pitch :background "gray85"))))
 ;;;'(custom-comment-tag ((((class color) (background light)) (:foreground "blue4"))))
 ;;;'(custom-documentation ((t nil)))
 ;;;'(custom-face-tag ((t (:weight bold :height 1.2))))
 ;;;'(custom-group-tag-1 ((t (:foreground "red" :weight bold :height 1.2))))
 ;;;'(custom-state ((((class color) (background light)) (:foreground "dark green"))))
 ;;;'(custom-variable-button ((t (:underline t :weight bold))))
 ;;;'(ecb-default-general-face ((((class color) (background light)) (:inherit variable-pitch))))
 ;;;'(ecb-default-highlight-face ((t (:background "darkorange2" :foreground "white"))))
 ;;;'(ecb-directory-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
 ;;;'(ecb-history-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
 ;;;'(ecb-history-general-face ((((class color) (background light)) (:inherit ecb-default-general-face))))
 ;;;'(ecb-method-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
 ;;;'(ecb-methods-general-face ((((class color) (background light)) (:inherit ecb-default-general-face))))
 ;;;'(ecb-source-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
 ;;;'(ecb-sources-general-face ((((class color) (background light)) (:inherit ecb-default-general-face))))
 ;;;'(ecb-tag-header-face ((((class color) (background dark)) (:background "dim grey" :foreground "orange"))))
 ;;;'(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
 ;;;'(font-lock-comment-face ((t (:foreground "SeaGreen4" :weight bold))))
 ;;;'(font-lock-constant-face ((((class color) (background dark)) (:foreground "salmon"))))
 ;;;'(font-lock-doc-string-face ((t (:foreground "green2"))))
 ;;;;'(font-lock-function-name-face ((t (:foreground "Dark Orange" :weight bold))))
 ;;;'(font-lock-keyword-face ((t (:foreground "blue"))))
 ;;;'(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
 ;;;'(font-lock-reference-face ((t (:foreground "DodgerBlue"))))
 ;;;'(font-lock-string-face ((t (:foreground "SaddleBrown"))))
 ;;;'(font-lock-type-face ((t (:foreground "Coral" :weight bold))))
 ;;;'(font-lock-variable-name-face ((t (:foreground "DarkGreen"))))
 ;;;'(font-lock-warning-face ((t (:foreground "salmon"))))
 ;;;'(fringe ((((class color) (background light)) (:background "grey95"))))
 ;;;'(highlight ((t (:background "CornflowerBlue"))))
 ;;;'(html-tag-face ((t (:foreground "blue"))))
 ;;;'(list-mode-item-selected ((t (:background "gold"))))
 ;;;'(makefile-space-face ((t (:background "wheat"))))
 ;;;'(menu ((t (:inherit fixed-pitch :background "gray" :foreground "white" :weight bold))))
 ;;;'(mode-line ((t (:background "light grey"))))
 ;;;'(nxml-attribute-colon-face ((t (:inherit nxml-name-face :weight normal))))
 ;;;'(nxml-attribute-local-name-face ((t (:inherit nxml-name-face :weight normal))))
 ;;;'(nxml-attribute-prefix-face ((t (:inherit nxml-name-face :weight normal))))
 ;;;'(nxml-attribute-value-delimiter-face ((t (:inherit nxml-delimiter-face :foreground "black"))))
 ;;;'(nxml-attribute-value-face ((t (:inherit nxml-delimited-data-face :foreground "SaddleBrown"))))
 ;;;'(nxml-comment-content-face ((t (:foreground "SeaGreen4" :weight bold))))
 ;;;'(nxml-comment-delimiter-face ((t (:inherit nxml-comment-content-face))))
 ;;;'(nxml-delimiter-face ((((class color) (background light)) (:foreground "blue" :weight bold))))
 ;;;'(nxml-name-face ((((class color) (background light)) (:foreground "blue" :weight bold))))
 ;;;'(nxml-namespace-attribute-colon-face ((t (:inherit nxml-name-face :weight normal))))
 ;;;'(nxml-namespace-attribute-prefix-face ((t (:inherit nxml-name-face :weight normal))))
 ;;;'(nxml-namespace-attribute-xmlns-face ((t (:inherit nxml-name-face :weight normal))))
 ;;;'(paren-match ((t (:background "darkseagreen4"))))
 ;;;'(region ((t (:background "Light Grey"))))
 ;;;'(scroll-bar ((t (:background "gray" :foreground "white"))))
 ;;;'(show-paren-match ((t (:foreground "black" :background "wheat"))))
 ;;;'(show-paren-mismatch ((((class color)) (:foreground "white" :background "red"))))
 ;;;'(speedbar-button-face ((((class color) (background dark)) (:foreground "green4"))))
 ;;;'(speedbar-directory-face ((((class color) (background dark)) (:foreground "khaki"))))
 ;;;'(speedbar-file-face ((((class color) (background dark)) (:foreground "cyan"))))
 ;;;'(speedbar-tag-face ((((class color) (background dark)) (:foreground "Springgreen"))))
 ;;;'(tool-bar ((((type x w32 mac) (class color)) (:inherit mode-line :background "grey75" :foreground "black" :box (:line-width 1 :style released-button)))))
 ;;;'(vhdl-font-lock-prompt-face ((((class color) (background dark)) (:bold t :foreground "wheat"))))
 ;;;'(vhdl-speedbar-architecture-selected-face ((((class color) (background dark)) (:underline t :foreground "Blue"))))
 ;;;'(vhdl-speedbar-entity-face ((((class color) (background dark)) (:foreground "darkGreen"))))
 ;;;'(vhdl-speedbar-entity-selected-face ((((class color) (background dark)) (:underline t :foreground "darkGreen"))))
 ;;;'(vhdl-speedbar-package-face ((((class color) (background dark)) (:foreground "black"))))
 ;;;'(vhdl-speedbar-package-selected-face ((((class color) (background dark)) (:underline t :foreground "black"))))
 ;;;'(widget-button ((t nil)))
 ;;;'(widget-button-pressed ((((class color)) nil)))
 ;;;'(widget-documentation ((((class color) (background light)) nil)))
 ;;;'(widget-field ((((class grayscale color) (background light)) (:box (:line-width 2 :color "grey75" :style pressed-button)))))
 ;;;'(widget-inactive ((((class grayscale color) (background light)) (:foreground "dim gray"))))
 ;;;'(widget-single-line-field ((t (:box (:line-width 2 :color "grey75" :style pressed-button))))))


;;
;; (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
;;  '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :family "adobe-courier"))))
;;  '(background "blue")
;;  '(border ((t (:background "black"))))
;;  '(custom-button ((((type x w32 mac) (class color)) (:background "lightgrey" :foreground "black" :box (:line-width 2 :style released-button) :family "helv"))))
;;  '(custom-button-pressed ((((type x w32 mac) (class color)) (:background "lightgrey" :foreground "black" :box (:line-width 2 :style pressed-button)))))
;;  '(custom-comment ((((class grayscale color) (background light)) (:inherit variable-pitch :background "gray85"))))
;;  '(custom-comment-tag ((((class color) (background light)) (:foreground "blue4"))))
;;  '(custom-documentation ((t nil)))
;;  '(custom-face-tag ((t (:weight bold :height 1.2))))
;;  '(custom-group-tag-1 ((t (:foreground "red" :weight bold :height 1.2))))
;;  '(custom-state ((((class color) (background light)) (:foreground "dark green"))))
;;  '(custom-variable-button ((t (:underline t :weight bold))))
;;  '(ecb-default-general-face ((((class color) (background light)) (:inherit variable-pitch))))
;;  '(ecb-default-highlight-face ((t (:background "darkorange2" :foreground "white"))))
;;  '(ecb-directory-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
;;  '(ecb-history-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
;;  '(ecb-history-general-face ((((class color) (background light)) (:inherit ecb-default-general-face))))
;;  '(ecb-method-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
;;  '(ecb-methods-general-face ((((class color) (background light)) (:inherit ecb-default-general-face))))
;;  '(ecb-source-face ((((class color) (background light)) (:inherit ecb-default-highlight-face))))
;;  '(ecb-sources-general-face ((((class color) (background light)) (:inherit ecb-default-general-face))))
;;  '(ecb-tag-header-face ((((class color) (background dark)) (:background "dim grey" :foreground "orange"))))
;;  '(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
;;  '(font-lock-comment-face ((t (:foreground "SeaGreen4" :weight bold))))
;;  '(font-lock-constant-face ((((class color) (background dark)) (:foreground "salmon"))))
;;  '(font-lock-doc-string-face ((t (:foreground "green2"))))
;;  '(font-lock-function-name-face ((t (:foreground "Dark Orange" :weight bold))))
;;  '(font-lock-keyword-face ((t (:foreground "blue"))))
;;  '(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
;;  '(font-lock-reference-face ((t (:foreground "DodgerBlue"))))
;;  '(font-lock-string-face ((t (:foreground "SaddleBrown"))))
;;  '(font-lock-type-face ((t (:foreground "Coral" :weight bold))))
;;  '(font-lock-variable-name-face ((t (:foreground "DarkGreen"))))
;;  '(font-lock-warning-face ((t (:foreground "salmon"))))
;;  '(fringe ((((class color) (background light)) (:background "grey95"))))
;;  '(highlight ((t (:background "CornflowerBlue"))))
;;  '(html-tag-face ((t (:foreground "blue"))))
;;  '(list-mode-item-selected ((t (:background "gold"))))
;;  '(makefile-space-face ((t (:background "wheat"))))
;;  '(menu ((t (:inherit fixed-pitch :background "gray" :foreground "white" :weight bold))))
;;  '(mode-line ((t (:background "light grey"))))
;;  '(paren-match ((t (:background "darkseagreen4"))))
;;  '(region ((t (:background "Light Grey"))))
;;  '(scroll-bar ((t (:background "gray" :foreground "white"))))
;;  '(show-paren-match ((t (:foreground "black" :background "wheat"))))
;;  '(show-paren-mismatch ((((class color)) (:foreground "white" :background "red"))))
;;  '(speedbar-button-face ((((class color) (background dark)) (:foreground "green4"))))
;;  '(speedbar-directory-face ((((class color) (background dark)) (:foreground "khaki"))))
;;  '(speedbar-file-face ((((class color) (background dark)) (:foreground "cyan"))))
;;  '(speedbar-tag-face ((((class color) (background dark)) (:foreground "Springgreen"))))
;;  '(tool-bar ((((type x w32 mac) (class color)) (:inherit mode-line :background "grey75" :foreground "black" :box (:line-width 1 :style released-button)))))
;;  '(vhdl-font-lock-prompt-face ((((class color) (background dark)) (:bold t :foreground "wheat"))))
;;  '(vhdl-speedbar-architecture-selected-face ((((class color) (background dark)) (:underline t :foreground "Blue"))))
;;  '(vhdl-speedbar-entity-face ((((class color) (background dark)) (:foreground "darkGreen"))))
;;  '(vhdl-speedbar-entity-selected-face ((((class color) (background dark)) (:underline t :foreground "darkGreen"))))
;;  '(vhdl-speedbar-package-face ((((class color) (background dark)) (:foreground "black"))))
;;  '(vhdl-speedbar-package-selected-face ((((class color) (background dark)) (:underline t :foreground "black"))))
;;  '(widget-button ((t nil)))
;;  '(widget-button-pressed ((((class color)) nil)))
;;  '(widget-documentation ((((class color) (background light)) nil)))
;;  '(widget-field ((((class grayscale color) (background light)) (:background "DarkBlue"))))
;;  '(widget-inactive ((((class grayscale color) (background light)) (:foreground "dim gray"))))
;;  '(widget-single-line-field ((t (:box (:line-width 2 :color "grey75" :style pressed-button))))))
